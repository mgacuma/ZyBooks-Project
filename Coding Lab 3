
#include<iostream>
#include<string>
#include<vector>
using namespace std;

////////////////////////STRUCTS////////////////////////

struct TokenFreq{
    string token;
    int freq;
}

////////////////////////FUNCTIONS////////////////////////

void getTokenFreqVec(string& istr,vector<TokenFreq>& tfVec){

    string topush;
    stringstream stream(istr);

    getline(stream, topush, ' ');
    TokenFreq temp = {topush, -1};

    while(getline(stream, topush, ' ')){
        for(i = 0; i < tfVec.size(); i++){
            if (topush == tfVec.at(i).token){
                tfVec.at(i).freq++;
            }
            else {
                TokenFreq newTok = {topsuh, 0};
                tfVec.push_back(newTok);
            }
        }
    }
}


void matrixInit( vector<vector<int> >& matrix, int numRows, int numCols){
    int i, j;
    matrix.resize(numRows, std::vector<int>(numCols));

    for (i = 0; i < numRows; i++){
        matrix.at(i).resize(numCols);
    }

    for(i = 0; i < numRows; i++){
        for(j = 0; j < numCols; j++){
            matrix.at(i).at(j) = i * j;
        }
    }

}



void print(vector<vector<int>> matrix){
    int i = 0, j = 0;

    for (i = 0; i < matrix.size(); i++){
        for (j = 0; j < matrix.at(1).size(); j++){
            cout << "matrix[" << i << "][" << j << "]=" << matrix.at(i).at(j) << endl;
        }
    }
}

////////////////////////MAIN////////////////////////

int main(){
    int rows, cols, i, j;
    vector<vector<int>> mat;

    cin >> rows;
    cin >> cols;

    matrixInit( mat, rows, cols);
    print(mat);

    string s;


    cin >> s;
    vector<TokenFreq> tf;

    getTokenFreqVec(s, tf);








    return 0;
}
