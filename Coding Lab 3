
#include<iostream>
#include<string>
#include<vector>
#include<sstream>
using namespace std;

////////////////////////STRUCTS////////////////////////

struct TokenFreq{
    string token;
    int freq;
};

ostream& operator << (ostream& os, const TokenFreq& rhs){
    os << "(token = " << "\"" << rhs.token << "\"" << ", freq = " << rhs.freq << ")";
    return os;
}

bool operator <= (const TokenFreq& lhs, const TokenFreq& rhs){
    bool res= false;
    if (lhs.freq <= rhs.freq) res = true;
    return res;
}

TokenFreq operator+ (const TokenFreq& lhs, const TokenFreq& rhs){
    TokenFreq temp;
    temp.token = lhs.token + " or " + rhs.token;
    temp.freq = lhs.freq + rhs.freq;
    return temp;
}

////////////////////////FUNCTIONS////////////////////////

void getTokenFreqVec(string& istr,vector<TokenFreq>& tfVec){
    int i, indicator;
    string topush;
    stringstream stream(istr);
    TokenFreq temp;
    bool match;

    while(getline(stream, topush, ' ')){
    match = false;
    if (topush==" ") continue;
    for(char& c: topush){
        c = tolower(c);
    }

        if (tfVec.empty()){
            temp.token = topush;
            temp.freq = 1;
            tfVec.push_back(temp);
        }

        else {
            for (i = 0; i < tfVec.size(); i++){
                if (topush == tfVec.at(i).token){
                    tfVec.at(i).freq++;
                    match = true;
                    break;
                }
            }

           if(!match) {
                temp.token = topush;
                temp.freq = 1;
                tfVec.push_back(temp);
            }
        }
    }
    cout << "size = " << tfVec.size() << endl;
    for (i = 0; i < tfVec.size(); i++){
        cout << "\t[" << i << "] =" << tfVec.at(i) << endl; 
    }
}

char tolower(char c){
    if( c >= 'A' && c <= 'Z')
        return c + 32;
    return c;
}


void matrixInit( vector<vector<int> >& matrix, int numRows, int numCols){
    int i, j;
    matrix.resize(numRows, std::vector<int>(numCols));

    for (i = 0; i < numRows; i++){
        matrix.at(i).resize(numCols);
    }

    for(i = 0; i < numRows; i++){
        for(j = 0; j < numCols; j++){
            matrix.at(i).at(j) = i * j;
        }
    }

}



void print(vector<vector<int>> matrix){
    int i = 0, j = 0;

    for (i = 0; i < matrix.size(); i++){
        for (j = 0; j < matrix.at(1).size(); j++){
            cout << "matrix[" << i << "][" << j << "]=" << matrix.at(i).at(j) << endl;
        }
    }
}

////////////////////////MAIN////////////////////////

int main(){
    int rows, cols, i, j;
    vector<vector<int>> mat;

    cin >> rows;
    cin >> cols;

    matrixInit( mat, rows, cols);
    print(mat);

    string s;

    getline(cin, s);

    cout << "string: " << s << endl;

    vector<TokenFreq> tf;

    getTokenFreqVec(s, tf);

    return 0;
}
